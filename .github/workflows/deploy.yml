name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, milestone-* ]  # Added milestone branches
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  FRONTEND_SERVICE: ${{ secrets.FRONTEND_SERVICE }}
  BACKEND_SERVICE: ${{ secrets.BACKEND_SERVICE }}

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    # Test Backend
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Build Backend
      working-directory: ./backend
      run: npm run build --if-present
    
    # Test Frontend
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Test Frontend
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
    
    # Run linting
    - name: Lint Backend
      working-directory: ./backend
      run: npm run lint --if-present
    
    - name: Lint Frontend  
      working-directory: ./frontend
      run: npm run lint --if-present

  # ðŸš€ PRODUCTION DEPLOYMENT - READY TO GO LIVE!
  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    # Only deploy from main branch AND when GCP secrets are available
    if: github.ref == 'refs/heads/main' && github.repository_owner != 'dependabot[bot]'
    
    steps:
    - uses: actions/checkout@v3
    
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
    
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
    
    - name: 'Configure Docker'
      run: gcloud auth configure-docker
    
    # Build and push Backend
    - name: Build Backend Image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA ./backend
        docker push gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA
    
    # Build and push Frontend  
    - name: Build Frontend Image
      env:
        REACT_APP_API_URL: https://leedz-backend-${{ env.PROJECT_ID }}.a.run.app/api
        REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        REACT_APP_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        REACT_APP_ENVIRONMENT: production
      run: |
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          --build-arg REACT_APP_API_URL="$REACT_APP_API_URL" \
          --build-arg REACT_APP_GOOGLE_CLIENT_ID="$REACT_APP_GOOGLE_CLIENT_ID" \
          --build-arg REACT_APP_STRIPE_PUBLISHABLE_KEY="$REACT_APP_STRIPE_PUBLISHABLE_KEY" \
          --build-arg REACT_APP_ENVIRONMENT="$REACT_APP_ENVIRONMENT" \
          ./frontend
        docker push gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA
    
    # Deploy Backend to Cloud Run
    - name: Deploy Backend to Cloud Run
      run: |
        gcloud run deploy $BACKEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$BACKEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=production,PORT=3001,FRONTEND_URL=https://leedz.online" \
          --set-secrets="DATABASE_URL=DATABASE_URL:latest,JWT_SECRET=JWT_SECRET:latest,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:latest,GOOGLE_CLIENT_SECRET=GOOGLE_CLIENT_SECRET:latest,STRIPE_SECRET_KEY=STRIPE_SECRET_KEY:latest,STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET:latest,STRIPE_MONTHLY_PRICE_ID=STRIPE_MONTHLY_PRICE_ID:latest" \
          --add-cloudsql-instances=$PROJECT_ID:$REGION:leedz-production-db \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=1 \
          --max-instances=10
    
    # Deploy Frontend to Cloud Run
    - name: Deploy Frontend to Cloud Run
      run: |
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/$FRONTEND_SERVICE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port=80 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=1 \
          --max-instances=5
    
    # Run Database Migrations
    - name: Run Database Migrations
      run: |
        # Get the backend service URL
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format='value(status.url)')
        echo "Backend deployed at: $BACKEND_URL"
        
        # Trigger migration endpoint (you'll need to add this endpoint)
        curl -X POST "$BACKEND_URL/api/admin/migrate" \
          -H "Authorization: Bearer ${{ secrets.MIGRATION_SECRET }}" \
          -f || echo "Migration endpoint not available or failed"
    
    # Output deployment URLs
    - name: Output Deployment Information
      run: |
        echo "ðŸš€ DEPLOYMENT COMPLETE!"
        echo "Backend URL: $(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format='value(status.url)')"
        echo "Frontend URL: $(gcloud run services describe $FRONTEND_SERVICE --region=$REGION --format='value(status.url)')"
        echo "Next steps:"
        echo "1. Configure custom domain DNS"
        echo "2. Update Stripe webhook URL"
        echo "3. Test production deployment" 